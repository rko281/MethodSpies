| package |
package := Package name: 'Method Spies'.
package paxVersion: 1;
	basicComment: 'Method Spies (intelligent breakpoints)
See Method Spies item in Method Workspace context menu

© Solutions Software/John Aspinall 2020
Provided under the same licence terms as Dolphin Smalltalk 7.1'.


package classNames
	add: #SSWMethodSpy;
	add: #SSWMethodSpyManager;
	add: #SSWMethodSpyPresenter;
	add: #SSWMethodWorkspace;
	add: #SSWSmalltalkSpyParser;
	add: #SSWSpiedMethodsCategory;
	add: #SSWSpyMethod;
	add: #SSWSpyMethodNode;
	yourself.

package methodNames
	add: #BlockFrame -> #argumentNames;
	add: #CompilationResult -> #textMap:;
	add: #CompiledCode -> #isSpy;
	add: #CompiledCode -> #primByteCodes;
	add: #CompiledCode -> #primByteCodes:;
	add: #CompiledMethod -> #asSpyMethodWithSpies:;
	add: #CompiledMethod -> #beSpiedOnBy:;
	add: #CompiledMethod -> #beSpiedOnByAll:;
	add: #CompiledMethod -> #hasBreakpoint;
	add: #CompiledMethod -> #insertSpy:;
	add: #CompiledMethod -> #methodSpies;
	add: #CompiledMethod -> #methodSpyManager;
	add: #CompiledMethod -> #recompileWithSpy:;
	add: #CompiledMethod -> #sourceWithSpies:;
	add: #CompiledMethod -> #spiedMethod;
	add: #CompiledMethod -> #testSourceWithSpies:;
	add: #Debugger -> #onMethodSpiesCompiledIn:;
	add: #InplaceTextEditor -> #showModalViewWithoutAdjustment;
	add: #InplaceTextEditor -> #showModalWithoutAdjustment;
	add: #SmalltalkSystem -> #methodWorkspaceClass:;
	add: #SmalltalkSystem -> #onMethodTransparentlyUpdated:;
	add: #StackFrame -> #argumentNames;
	add: #StAssignmentNode -> #isSpyable;
	add: #StMessageNode -> #isSpyable;
	add: #StProgramNode -> #firstSpyableNode;
	add: #StProgramNode -> #identityIndexOfNode:;
	add: #StProgramNode -> #isSpyable;
	add: #StProgramNode -> #nodeAtIndex:;
	add: #StProgramNode -> #spySourceInterval;
	add: #StReturnNode -> #isSpyable;
	yourself.

package binaryGlobalNames: (Set new
	yourself).

package globalAliases: (Set new
	yourself).

package setPrerequisites: #(
	'..\Core\Object Arts\Dolphin\IDE\Base\Development System'
	'..\Core\Object Arts\Dolphin\Base\Dolphin'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin Basic Geometry'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin Choice Prompter'
	'..\Core\Object Arts\Dolphin\MVP\Views\Control Bars\Dolphin Control Bars'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Prompters\Dolphin In-place Text Editor'
	'..\Core\Object Arts\Dolphin\Base\Dolphin Message Box'
	'..\Core\Object Arts\Dolphin\MVP\Base\Dolphin MVP Base'
	'..\Core\Object Arts\Dolphin\MVP\Views\Scintilla\Dolphin Scintilla View'
	'..\Core\Object Arts\Dolphin\MVP\Presenters\Text\Dolphin Text Presenter'
	'..\Core\Object Arts\Dolphin\MVP\Icons\Dolphin Text Tile Icons'
	'..\Core\Contributions\Refactory\Refactoring Browser\Parser\RBParser'
	'..\Core\Object Arts\Dolphin\System\Compiler\Smalltalk Parser').

package!

"Class Definitions"!

Object subclass: #SSWMethodSpy
	instanceVariableNames: 'spySource methodSourceInterval spySourceInterval activations isLocallyEnabled method context description targetObject'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
VirtualMethodCategory subclass: #SSWSpiedMethodsCategory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
CompiledMethod variableSubclass: #SSWSpyMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
Model subclass: #SSWMethodSpyManager
	instanceVariableNames: 'areSpiesEnabled'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: 'current'!
Presenter subclass: #SSWMethodSpyPresenter
	instanceVariableNames: 'spySourcePresenter'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
MethodWorkspace subclass: #SSWMethodWorkspace
	instanceVariableNames: ''
	classVariableNames: 'IndicatorStylesWithSpies'
	poolDictionaries: 'SmalltalkParseErrorCodes'
	classInstanceVariableNames: ''!
SmalltalkParser subclass: #SSWSmalltalkSpyParser
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
StMethodNode subclass: #SSWSpyMethodNode
	instanceVariableNames: 'methodSpies'
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!

"Global Aliases"!


"Loose Methods"!

!BlockFrame methodsFor!

argumentNames

	"Cannot reliably extract these for a block. Make some up"

	^(1 to: self argumentCount) collect: [ :argIndex | 'arg', argIndex displayString]! !
!BlockFrame categoriesForMethods!
argumentNames!accessing!public! !
!

!CompilationResult methodsFor!

textMap: anOrderedCollectionOfAssociation 
	textMap := anOrderedCollectionOfAssociation! !
!CompilationResult categoriesForMethods!
textMap:!accessing!public! !
!

!CompiledCode methodsFor!

isSpy

	^false!

primByteCodes

	^byteCodes!

primByteCodes: anObject

	byteCodes := anObject! !
!CompiledCode categoriesForMethods!
isSpy!public!testing! !
primByteCodes!accessing!public! !
primByteCodes:!accessing!public! !
!

!CompiledMethod methodsFor!

asSpyMethodWithSpies: aCollection

	| spyMethod |

	spyMethod := SSWSpyMethod new: self size.
	1 to: self size do: [ :index | spyMethod at: index put: (self at: index)].

	^spyMethod 
		header: self header;
		primByteCodes: self primByteCodes;
		selector: self selector;
		sourceDescriptor: self sourceDescriptor;
		methodClass: self methodClass;
		methodSpies: aCollection;
		infiltrateWithSpies;
		yourself!

beSpiedOnBy: aMethodSpy

	| methodSpies |

	methodSpies := self methodSpies copy.
	methodSpies add: aMethodSpy.

	^self beSpiedOnByAll: methodSpies!

beSpiedOnByAll: methodSpies

	| spiedSource compResult spyMethod |

	"Test for compilation errors"
	self methodClass compilerClass compile: (self testSourceWithSpies: methodSpies) in: self methodClass flags: 0.

	"Get the real source and retest (should not fail)"
	spiedSource := self sourceWithSpies: methodSpies.
	spiedSource isNil ifTrue: [CompilerErrorNotification signal: 'Invalid spy source'].

	compResult := self methodClass compilerClass compile: spiedSource in: self methodClass flags: 0.
	spyMethod := compResult method.
	spyMethod isNil ifTrue: [CompilerErrorNotification signal: 'Invalid spy source'].

	spyMethod become: (spyMethod asSpyMethodWithSpies: methodSpies).
	spyMethod 
		contactSpies;
		sourceDescriptor: self sourceDescriptor;
		spiedMethod: self spiedMethod.

	compResult 
		method: spyMethod;
		oldMethod: (self methodClass methodDictionary at: self selector).
	self methodClass methodDictionary at: self selector put: spyMethod.
	self methodSpyManager spiesCompiledIn: compResult!

hasBreakpoint

	^false!

insertSpy: aMethodSpy

	aMethodSpy hasMethodSourcePosition ifFalse: [aMethodSpy methodSourceNode: self parseTree body statements first].

	^self beSpiedOnBy: aMethodSpy!

methodSpies

	^SortedCollection new!

methodSpyManager

	^SSWMethodSpyManager current!

recompileWithSpy: aMethodSpy

	self beSpiedOnBy: aMethodSpy!

sourceWithSpies: aCollection

	| sourceRead sourceWrite spies spyCount |

	sourceRead := ReadStream on: self getSource.
	sourceWrite := WriteStream on: (String new: sourceRead size).
	spies := ReadStream on: aCollection.
	spyCount := 0.

	[spies atEnd] whileFalse:
		[| nextSpy nextSource |
		nextSpy := spies next.
		spyCount := spyCount + 1.
		[sourceRead position < (nextSpy methodSourcePosition - 1)] whileTrue: 
			[sourceWrite nextPut: sourceRead next].
		nextSource := nextSpy spySourceAt: sourceWrite position spyCount: spyCount.
		nextSource isNil ifTrue: [^nil].
		sourceWrite nextPutAll: nextSource].

	sourceWrite nextPutAll: sourceRead upToEnd.

	^sourceWrite contents!

spiedMethod

	^self!

testSourceWithSpies: aCollection

	"Return a 'test' version of the receiver's source, 
	with the source of each spy directly in the body of the method.
	This allows us to test for compilation errors, 
	unlike sourceWithSpies: which only includes a call to the spy source"

	| sourceRead sourceWrite spies |

	sourceRead := ReadStream on: self getSource.
	sourceWrite := WriteStream on: (String new: sourceRead size).
	spies := ReadStream on: aCollection.

	[spies atEnd] whileFalse:
		[| nextSpy |
		nextSpy := spies next.
		[sourceRead position < (nextSpy methodSourcePosition - 1)] whileTrue: 
			[sourceWrite nextPut: sourceRead next].
		sourceWrite 
			nextPut: $[;
			nextPutAll: nextSpy spySourceForTest;
			nextPutAll: '].'].

	sourceWrite nextPutAll: sourceRead upToEnd.

	^sourceWrite contents! !
!CompiledMethod categoriesForMethods!
asSpyMethodWithSpies:!compiling!public! !
beSpiedOnBy:!compiling!public! !
beSpiedOnByAll:!compiling!public! !
hasBreakpoint!public!testing! !
insertSpy:!compiling!public! !
methodSpies!accessing!public! !
methodSpyManager!accessing!public! !
recompileWithSpy:!compiling!public! !
sourceWithSpies:!accessing!public! !
spiedMethod!accessing!public! !
testSourceWithSpies:!accessing!public! !
!

!Debugger methodsFor!

onMethodSpiesCompiledIn: aCompiledMethod

	"Check for a relevant change in spies and restart if necessary"

	self selectedMethod ifNotNil: 
		[ :method |
		"Only restart if the current method is affected"
		(method methodClass = aCompiledMethod methodClass and: [method selector = aCompiledMethod selector]) ifTrue: [[self restartMethod] postToInputQueue]]! !
!Debugger categoriesForMethods!
onMethodSpiesCompiledIn:!event handling!public! !
!

!InplaceTextEditor methodsFor!

showModalViewWithoutAdjustment
	
	[(self editBox)
		selectAll;
		setMarginWidths: #(0 0).
	minExtent := textRectangle extent.
	self resizeToFit.
	self view
		position: textRectangle origin;
		layout;
		show.
	self runModalInProcessLoop] 
			ensure: [self view basicDestroy]!

showModalWithoutAdjustment
	"Show the receiver's view as a modal 'dialog'. Answer the revised text, or the original text if cancelled."

	self showModalViewWithoutAdjustment.
	^self answer! !
!InplaceTextEditor categoriesForMethods!
showModalViewWithoutAdjustment!helpers!private! !
showModalWithoutAdjustment!public!realizing/unrealizing! !
!

!SmalltalkSystem methodsFor!

methodWorkspaceClass: toolClass
	"Set the class of presenter to be used for method source workspaces in the various tools
	(e.g. Debugger and method browser)."

	methodWorkspaceClass := toolClass!

onMethodTransparentlyUpdated: aCompilationResult 
	
	"Transparent change therefore do not notify the package manager"

	self trigger: #methodUpdated: with: aCompilationResult! !
!SmalltalkSystem categoriesForMethods!
methodWorkspaceClass:!options!public! !
onMethodTransparentlyUpdated:!event handling!public! !
!

!StackFrame methodsFor!

argumentNames

	^self method parseTree argumentNames! !
!StackFrame categoriesForMethods!
argumentNames!accessing!public! !
!

!StAssignmentNode methodsFor!

isSpyable

	^true! !
!StAssignmentNode categoriesForMethods!
isSpyable!public!testing! !
!

!StMessageNode methodsFor!

isSpyable

	^true! !
!StMessageNode categoriesForMethods!
isSpyable!public!testing! !
!

!StProgramNode methodsFor!

firstSpyableNode

	self nodesDo: [ :each | each isSpyable ifTrue: [^each statementNode]].

	"Empty method"
	^nil!

identityIndexOfNode: aNode

	| index |

	index := 1.

	self nodesDo: [ :node | node == aNode ifTrue: [^index]. index := index + 1].

	^nil!

isSpyable

	^false!

nodeAtIndex: anInteger

	| index |

	index := 1.

	self nodesDo: [ :node | index = anInteger ifTrue: [^node]. index := index + 1].

	^nil!

spySourceInterval

	| methodBody topNodeIntervals |

	methodBody := self methodNode body.
	self parent = methodBody ifFalse: [^self start to: (self stop + 1)].

	topNodeIntervals := methodBody children collect: [ :each | each sourceInterval].
	^self sourceInterval = topNodeIntervals last
		ifTrue: [self start to: methodBody stop + 1]
		ifFalse: [self start to: (topNodeIntervals after: self sourceInterval) start - 1]! !
!StProgramNode categoriesForMethods!
firstSpyableNode!accessing!public! !
identityIndexOfNode:!accessing!public! !
isSpyable!public!testing! !
nodeAtIndex:!accessing!public! !
spySourceInterval!accessing!public! !
!

!StReturnNode methodsFor!

isSpyable

	^true! !
!StReturnNode categoriesForMethods!
isSpyable!public!testing! !
!

"End of package definition"!

