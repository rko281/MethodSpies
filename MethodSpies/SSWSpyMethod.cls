"Filed out from Dolphin Smalltalk"!

CompiledMethod variableSubclass: #SSWSpyMethod
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	classInstanceVariableNames: ''!
SSWSpyMethod guid: (GUID fromString: '{57e97f41-21f6-11d6-87e5-0010a70883e2}')!
SSWSpyMethod comment: ''!
!SSWSpyMethod categoriesForClass!Unclassified! !
!SSWSpyMethod methodsFor!

asDebugMethod

	"Overriden to construct a debug version of the receiver spyMethod"

	| spyDebugMethod |

	self isDebugMethod ifTrue: [^self].

	spyDebugMethod := self compilerClass compileDebugMethod: self sourceWithSpies in: self methodClass.

	"Copy across some bits we need as we are an unbound method"
	spyDebugMethod
		sourceDescriptor: self sourceDescriptor;
		selector: self selector;
		isPrivate: self isPrivate.

	spyDebugMethod become: (spyDebugMethod asSpyMethodWithSpies: self methodSpies).
	
	^spyDebugMethod 
		sourceDescriptor: self sourceDescriptor;
		spiedMethod: self spiedMethod;
		yourself!

contactSpies

 	self methodSpies do: [ :each | each method: self]!

currentMethod

	^self methodClass compiledMethodAt: self selector!

debugInfo

	"Always generate the debugInfo for a spy method"

	^self getDebugInfo!

getDebugInfo

	"Overriden to map certain info from the receiver's debugInfo to the actual debugInfo"

	| spyDebugInfo textMap |

	spyDebugInfo := self compilerClass 
		debugInfoFor: self sourceWithSpies
		in: self methodClass 
		debug: self isDebugMethod.

	textMap := spyDebugInfo textMap.

	self methodSpies do: 
		[ :each || spySize |
		spySize := SSWMethodSpy spySource size.
		textMap do: 
			[ :assoc || interval |
			interval := assoc value.
			(interval includes: each methodSourcePosition) 
				ifTrue: [interval stop: ((interval stop - spySize) max: (interval start + each methodSourceInterval size - 1))]
				ifFalse: [interval start > each methodSourcePosition ifTrue: [assoc value: (interval - spySize)]]]].

	spyDebugInfo textMap: textMap.

	^spyDebugInfo!

hasBreakpoint

	^self methodSpies size = 1 and: [self methodSpies first isBreakpoint]!

hash

	"Overriden since superclass implementation directly accesses selector"

	^(self selector hash bitShift: 4) bitXor: methodClass hash!

icon

	^self isPrivate 
		ifTrue: [self class privateIcon] 
		ifFalse: [self class publicIcon]!

infiltrateWithSpies

	"Fill out the receiver's frame with the actual spies (replacing #thisSpyX placeholders)"

	1 to: self size do:
		[ :index || entry |
		entry := self at: index. 
		(entry isSymbol and: [entry beginsWith: 'thisSpy']) ifTrue:
			[self at: index put: (self methodSpies at: (entry allButFirst: 7) asNumber)]]!

initSelector

	selector := Array new: 3!

isPrivate
	"Private - Answer whether the receiver is a debug method."

	^self spiedMethod isPrivate!

isPrivate: aBoolean 
	"Private - Set whether the receiver is a private method."

	self spiedMethod isPrivate: aBoolean!

isSpy

	^true!

isUnbound

	"Additionally check for a change of method instance"

	^super isUnbound or: 
		[| current |
		current := self currentMethod.
		current isSpy not or: [self methodSpies ~= current methodSpies]]!

methodSpies

	"Use embedded storage in selector - cannot add inst vars to CompiledMethod"

	^selector at: 2!

methodSpies: anOrderedCollection

	"Use embedded storage in selector - cannot add inst vars to CompiledMethod"

	selector at: 2 put: anOrderedCollection!

parseTree

	"Overriden to use the SpyParser"

	^(SSWSmalltalkSpyParser parseMethod: self getSource in: self methodClass)
		methodSpies: self methodSpies;
		yourself
!

recompile

	self beSpiedOnByAll: self methodSpies!

recompileWithSpy: aMethodSpy

	(self methodSpies includes: aMethodSpy)
		ifTrue: [self recompile]
		ifFalse: [self beSpiedOnBy: aMethodSpy]!

removeAllSpies

	self methodClass methodDictionary at: self selector put: self spiedMethod.
	self methodSpyManager spiesCompiledIn: 
		(CompilationResult new 
			method: self spiedMethod; 
			oldMethod: self;
			yourself)!

removeSpies: aCollection

	self methodSpies size = aCollection size ifTrue: [^self removeAllSpies].

	self beSpiedOnByAll: 
		(self methodSpies copy
			removeAll: aCollection;
			yourself)!

removeSpy: aMethodSpy

	self removeSpies: (Array with: aMethodSpy)!

selector

	"Overriden since we 'borrow' the selector inst var for methodSpies/spiedMethod"

	^selector at: 1!

selector: aSymbol

	"Overriden since we 'borrow' the selector inst var for methodSpies/spiedMethod"

	selector at: 1 put: aSymbol asSymbol!

sourceDescriptor

	"Override to check whether this message is sent from unbound
	 - need to force unbound for comparisons of CompiledMethod with SpyMethod"

	^Processor activeProcess topFrame sender method == (CompiledMethod compiledMethodAt: #isUnbound)
		ifTrue: [0]
		ifFalse: [super sourceDescriptor]!

sourceWithSpies

	^self sourceWithSpies: self methodSpies!

spiedMethod

	"Use embedded storage in selector - cannot add inst vars to CompiledMethod"

	^selector at: 3!

spiedMethod: anSSWSpyMethod

	"Use embedded storage in selector - cannot add inst vars to CompiledMethod"

	selector at: 3 put: anSSWSpyMethod! !
!SSWSpyMethod categoriesForMethods!
asDebugMethod!development!private! !
contactSpies!compiling!public! !
currentMethod!accessing!public! !
debugInfo!compiling!public! !
getDebugInfo!development!private! !
hasBreakpoint!public!testing! !
hash!comparing!public! !
icon!accessing!public! !
infiltrateWithSpies!compiling!public! !
initSelector!compiling!initializing!public! !
isPrivate!private!testing! !
isPrivate:!accessing!private! !
isSpy!public!testing! !
isUnbound!public!testing! !
methodSpies!accessing!public! !
methodSpies:!accessing!public! !
parseTree!accessing!public! !
recompile!compiling!public! !
recompileWithSpy:!compiling!public! !
removeAllSpies!compiling!public! !
removeSpies:!compiling!public! !
removeSpy:!compiling!public! !
selector!accessing!public! !
selector:!accessing!public! !
sourceDescriptor!accessing!public! !
sourceWithSpies!accessing!public! !
spiedMethod!accessing!public! !
spiedMethod:!accessing!public! !
!

!SSWSpyMethod class methodsFor!

icon

	^##((TextTileIcon text: $\x1F576 fontName: 'Segoe UI Symbol' color: (ARGB r: 2 g: 121 b: 215)) textcolor: Color white; yourself)!

new: anInteger

	"Overriden to initialize the 'borrowed' selector inst var"

	^(super new: anInteger)
		initSelector;
		yourself!

privateIcon

	^##((TextTileIcon text: $\x1F576 fontName: 'Segoe UI Symbol' color: Color red) textcolor: Color white; yourself)!

publicIcon

	^##((TextTileIcon text: $\x1F576 fontName: 'Segoe UI Symbol' color: (ARGB named: #limeGreen)) textcolor: Color white; yourself)! !
!SSWSpyMethod class categoriesForMethods!
icon!accessing!public! !
new:!instance creation!public! !
privateIcon!constants!public! !
publicIcon!constants!public! !
!

